name: üêõ Debug Beta Gathering

on:
  workflow_dispatch:
    inputs:
      test_all_sources:
        description: 'Test all gather sources (not just beta)'
        type: boolean
        default: false
      verbose_output:
        description: 'Enable maximum verbosity'
        type: boolean
        default: true

jobs:
  debug-beta-gather:
    name: Debug Beta Data Gathering
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Show system info
        run: |
          echo "üñ•Ô∏è System Information:"
          uname -a
          echo ""
          echo "üìÖ Current time (UTC): $(date -u)"
          echo "üìÖ Current time (local): $(date)"
          echo ""
          echo "üåê Network connectivity test:"
          ping -c 3 google.com || echo "Network issues detected"
          
      - name: Install Apple Root Certificates
        run: |
          echo "üîê Installing Apple root certificates for SSL validation..."
          
          # Update package database
          sudo apt-get update
          
          # Install ca-certificates if not present
          sudo apt-get install -y ca-certificates curl
          
          # Download and install Apple Root CA-G3 (current primary root)
          echo "üì• Downloading Apple Root CA-G3..."
          sudo curl -f -o /usr/local/share/ca-certificates/apple-root-ca-g3.crt \
            "https://www.apple.com/certificateauthority/AppleRootCA-G3.cer"
          
          # Download and install Apple Root CA (legacy support)
          echo "üì• Downloading Apple Root CA (legacy)..."
          sudo curl -f -o /usr/local/share/ca-certificates/apple-root-ca.crt \
            "https://www.apple.com/certificateauthority/AppleComputerRootCertificate.cer"
          
          # Update system certificate store
          echo "üîÑ Updating system certificate store..."
          sudo update-ca-certificates
          
          # Verify installation
          echo "‚úÖ Apple certificates installed:"
          ls -la /usr/local/share/ca-certificates/apple-*
          
          # Test SSL connection to Apple Developer
          echo "üß™ Testing SSL connection to developer.apple.com..."
          if curl -I --max-time 10 "https://developer.apple.com/news/releases/" >/dev/null 2>&1; then
            echo "‚úÖ SSL connection to Apple Developer successful"
          else
            echo "‚ö†Ô∏è SSL connection test failed - but continuing anyway"
          fi
          
      - name: Download SOFA CLI binaries
        run: |
          echo "üì• Downloading SOFA CLI binaries for debugging..."
          mkdir -p bin
          
          DOWNLOAD_URL="https://github.com/headmin/sofa-core-cli/releases/download/v0.1.0-beta1"
          LINUX_ZIP="sofa-core-cli-x86_64-linux-binaries.zip"
          
          echo "Downloading: $DOWNLOAD_URL/$LINUX_ZIP"
          
          if curl -L -f -o "$LINUX_ZIP" "$DOWNLOAD_URL/$LINUX_ZIP"; then
            echo "‚úÖ Downloaded successfully"
            
            echo "üì¶ Extracting binaries..."
            unzip -o -j "$LINUX_ZIP" -d bin/
            chmod +x bin/*
            rm "$LINUX_ZIP"
            
            echo "‚úÖ Extraction complete"
            echo ""
            echo "üìÅ Downloaded binaries:"
            ls -la bin/
            echo ""
            echo "üîç Binary details:"
            file bin/sofa-gather
            
            echo ""
            echo "‚úÖ Testing binary execution:"
            if ./bin/sofa-gather --help >/dev/null 2>&1; then
              echo "‚úÖ sofa-gather binary executes successfully"
            else
              echo "‚ùå sofa-gather binary execution failed"
              echo "Trying direct execution test:"
              ./bin/sofa-gather --help || echo "Direct test also failed"
            fi
          else
            echo "‚ùå Download failed"
            exit 1
          fi

      - name: Test Apple Beta RSS access
        run: |
          echo "üçé Testing direct access to Apple Beta RSS feed..."
          echo ""
          
          BETA_RSS_URL="https://developer.apple.com/rss/betas.rss"
          echo "URL: $BETA_RSS_URL"
          echo ""
          
          echo "üì° Testing connectivity to Apple Developer site..."
          if ping -c 3 developer.apple.com; then
            echo "‚úÖ Can reach developer.apple.com"
          else
            echo "‚ö†Ô∏è Issues reaching developer.apple.com"
          fi
          echo ""
          
          echo "üîç Testing HTTPS access to beta RSS feed..."
          if curl -I -s --max-time 30 "$BETA_RSS_URL"; then
            echo ""
            echo "‚úÖ Can access beta RSS feed"
            echo ""
            echo "üìÑ First 50 lines of beta RSS content:"
            curl -s --max-time 30 "$BETA_RSS_URL" | head -50
            echo ""
            echo "üîç Looking for recent beta releases:"
            curl -s --max-time 30 "$BETA_RSS_URL" | grep -i "beta.*9\|beta.*8" | head -5 || echo "No recent betas found in RSS"
          else
            echo "‚ùå Cannot access beta RSS feed"
            echo "Testing with verbose curl:"
            curl -v --max-time 30 "$BETA_RSS_URL" || echo "Verbose curl also failed"
          fi

      - name: Test beta gathering with maximum debugging
        run: |
          echo "üß™ Testing sofa-gather beta with maximum verbosity..."
          echo ""
          
          # Set up environment
          export RUST_LOG=debug
          export RUST_BACKTRACE=full
          
          # Create output directory
          mkdir -p debug_output
          
          echo "üîß Environment variables:"
          echo "RUST_LOG=$RUST_LOG"
          echo "RUST_BACKTRACE=$RUST_BACKTRACE"
          echo ""
          
          echo "üìÇ Testing different output methods:"
          echo ""
          
          # Test 1: Default output location
          echo "Test 1: Default output (should go to data/resources/)"
          mkdir -p data/resources
          if timeout 120 ./bin/sofa-gather beta; then
            echo "‚úÖ Test 1 completed successfully"
            if [ -f "data/resources/apple_beta_feed.json" ]; then
              echo "‚úÖ Beta feed file created:"
              ls -la data/resources/apple_beta_feed.json
              echo "File size: $(wc -c < data/resources/apple_beta_feed.json) bytes"
              echo "First few lines:"
              head -10 data/resources/apple_beta_feed.json || echo "Could not read file"
            else
              echo "‚ùå No beta feed file created in default location"
              echo "Files in data/resources/:"
              ls -la data/resources/ || echo "Directory doesn't exist"
            fi
          else
            echo "‚ùå Test 1 failed or timed out"
          fi
          echo ""
          
          # Test 2: Custom output location
          echo "Test 2: Custom output location"
          if timeout 120 ./bin/sofa-gather beta --output debug_output/beta_test.json; then
            echo "‚úÖ Test 2 completed successfully"
            if [ -f "debug_output/beta_test.json" ]; then
              echo "‚úÖ Beta feed file created in custom location:"
              ls -la debug_output/beta_test.json
              echo "Content preview:"
              head -10 debug_output/beta_test.json || echo "Could not read file"
            else
              echo "‚ùå No beta feed file created in custom location"
            fi
          else
            echo "‚ùå Test 2 failed or timed out"
          fi
          echo ""
          
          # Test 3: Verbose output with stderr capture
          echo "Test 3: Maximum verbosity with error capture"
          if timeout 120 ./bin/sofa-gather beta --output debug_output/beta_verbose.json 2>debug_output/beta_errors.log; then
            echo "‚úÖ Test 3 completed"
          else
            echo "‚ùå Test 3 failed or timed out"
          fi
          
          echo ""
          echo "üìã Error log contents:"
          if [ -f "debug_output/beta_errors.log" ]; then
            echo "Error log size: $(wc -c < debug_output/beta_errors.log) bytes"
            if [ -s "debug_output/beta_errors.log" ]; then
              echo "Error log contents:"
              cat debug_output/beta_errors.log
            else
              echo "Error log is empty (this is good!)"
            fi
          else
            echo "No error log created"
          fi
          
          echo ""
          echo "üìÅ All generated files:"
          find . -name "*beta*" -type f -newer /tmp 2>/dev/null || echo "No beta files found"

      - name: Compare with other gather sources (if enabled)
        if: github.event.inputs.test_all_sources == 'true'
        run: |
          echo "üîç Testing other gather sources for comparison..."
          echo ""
          
          SOURCES=("kev" "gdmf" "ipsw" "uma" "xprotect")
          
          for source in "${SOURCES[@]}"; do
            echo "Testing source: $source"
            if timeout 60 ./bin/sofa-gather "$source" --output "debug_output/${source}_test.json" 2>"debug_output/${source}_errors.log"; then
              if [ -f "debug_output/${source}_test.json" ]; then
                size=$(wc -c < "debug_output/${source}_test.json")
                echo "‚úÖ $source: Success ($size bytes)"
              else
                echo "‚ùå $source: No output file created"
              fi
            else
              echo "‚ùå $source: Command failed or timed out"
            fi
            
            # Show errors if any
            if [ -f "debug_output/${source}_errors.log" ] && [ -s "debug_output/${source}_errors.log" ]; then
              echo "‚ö†Ô∏è $source errors:"
              head -5 "debug_output/${source}_errors.log"
            fi
            echo ""
          done

      - name: Test with config file
        run: |
          echo "‚öôÔ∏è Testing with gather.toml configuration..."
          echo ""
          
          if [ -f "config/gather.toml" ]; then
            echo "‚úÖ gather.toml found"
            echo "Configuration preview:"
            head -20 config/gather.toml
            echo ""
            
            echo "üß™ Testing beta gathering with config file context..."
            # Run from repo root where config can be found
            if timeout 120 ./bin/sofa-gather beta --output debug_output/beta_with_config.json; then
              echo "‚úÖ Config-based test completed"
              if [ -f "debug_output/beta_with_config.json" ]; then
                echo "Output file created: $(wc -c < debug_output/beta_with_config.json) bytes"
              fi
            else
              echo "‚ùå Config-based test failed"
            fi
          else
            echo "‚ùå No gather.toml found"
            echo "Available config files:"
            ls -la config/ 2>/dev/null || echo "No config directory"
          fi

      - name: Final summary and file upload prep
        run: |
          echo "üìä Final Summary"
          echo "==============="
          echo ""
          echo "Generated files:"
          find debug_output/ -type f 2>/dev/null | while read -r file; do
            size=$(wc -c < "$file" 2>/dev/null || echo "0")
            echo "  $file ($size bytes)"
          done
          echo ""
          
          echo "Data directory contents:"
          ls -la data/resources/ 2>/dev/null || echo "No data/resources directory"
          echo ""
          
          echo "üéØ Key findings will be in the uploaded artifacts"
          
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: beta-debug-${{ github.run_number }}
          path: |
            debug_output/
            data/resources/apple_beta_feed.json
            data/resources/apple_beta_os_history.json
            config/gather.toml
          retention-days: 7
          if-no-files-found: warn

      - name: Create debug summary
        if: always()
        run: |
          echo "## üêõ Beta Gathering Debug Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "debug_output/beta_test.json" ] || [ -f "data/resources/apple_beta_feed.json" ]; then
            echo "‚úÖ **SUCCESS**: Beta gathering appears to be working" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Generated files:" >> $GITHUB_STEP_SUMMARY
            find . -name "*beta*" -type f 2>/dev/null | while read -r file; do
              size=$(wc -c < "$file" 2>/dev/null || echo "0")
              echo "- \`$file\` ($size bytes)" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "‚ùå **FAILURE**: Beta gathering did not produce expected output" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the artifacts for detailed logs and error information." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîç **Next Steps**: Review the uploaded artifacts for detailed debugging information." >> $GITHUB_STEP_SUMMARY