name: üêõ Debug Beta Gathering - Complete Analysis

on:
  workflow_dispatch:
    inputs:
      verbose_output:
        description: 'Enable maximum verbosity'
        type: boolean
        default: true
      compare_with_pipeline:
        description: 'Compare with full pipeline method'
        type: boolean
        default: true

jobs:
  debug-beta-gather:
    name: Complete Beta Gathering Debug
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: System info and setup
        run: |
          echo "üñ•Ô∏è System Information:"
          uname -a
          echo "üìÖ Current time (UTC): $(date -u)"
          echo "üåê Network connectivity test:"
          ping -c 3 google.com || echo "Network issues detected"
          
      - name: Install Apple Root Certificates
        run: |
          echo "üîê Installing Apple root certificates..."
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl jq
          
          # Download Apple Root CA-G3
          echo "üì• Downloading Apple Root CA-G3..."
          sudo curl -f -o /usr/local/share/ca-certificates/apple-root-ca-g3.crt \
            "https://www.apple.com/certificateauthority/AppleRootCA-G3.cer"
          
          # Download Apple Root CA (legacy)
          echo "üì• Downloading Apple Root CA (legacy)..."
          sudo curl -f -o /usr/local/share/ca-certificates/apple-root-ca.crt \
            "https://www.apple.com/certificateauthority/AppleComputerRootCertificate.cer"
          
          # Update system certificate store
          sudo update-ca-certificates
          
          echo "‚úÖ Apple certificates installed"
          
      - name: Download SOFA CLI beta3 binaries
        run: |
          echo "üì• Downloading SOFA CLI beta3 binaries..."
          mkdir -p bin
          
          DOWNLOAD_URL="https://github.com/headmin/sofa-core-cli/releases/download/v0.1.0-beta3"
          LINUX_ZIP="sofa-core-cli-x86_64-linux-binaries.zip"
          
          echo "Downloading: $DOWNLOAD_URL/$LINUX_ZIP"
          
          if curl -L -f -o "$LINUX_ZIP" "$DOWNLOAD_URL/$LINUX_ZIP"; then
            echo "‚úÖ Downloaded successfully"
            unzip -o -j "$LINUX_ZIP" -d bin/
            chmod +x bin/*
            rm "$LINUX_ZIP"
            
            echo "üìÅ Downloaded binaries:"
            ls -la bin/
            
            echo "üîç Binary details:"
            for binary in bin/sofa-*; do
              if [ -f "$binary" ]; then
                echo "  $(basename $binary): $(file $binary)"
              fi
            done
            
            echo "‚úÖ Testing binary execution:"
            if ./bin/sofa-gather --version; then
              echo "‚úÖ sofa-gather binary works"
            else
              echo "‚ùå sofa-gather binary failed"
            fi
          else
            echo "‚ùå Download failed"
            exit 1
          fi

      - name: Setup directories and check current state
        run: |
          echo "üìÇ Setting up directories..."
          mkdir -p data/resources data/cache logs config
          
          echo "üìä Current directory structure:"
          find . -name "data" -o -name "bin" -o -name "config" -type d | head -10
          
          echo "üìã Current state of beta files:"
          if [ -f "data/resources/apple_beta_feed.json" ]; then
            echo "‚úÖ apple_beta_feed.json exists:"
            ls -la data/resources/apple_beta_feed.json
            echo "   Current hash: $(sha256sum data/resources/apple_beta_feed.json | cut -d' ' -f1)"
            echo "   Size: $(wc -c < data/resources/apple_beta_feed.json) bytes"
            echo "   Modified: $(stat -c %Y data/resources/apple_beta_feed.json) ($(date -d @$(stat -c %Y data/resources/apple_beta_feed.json)))"
            FEED_COUNT=$(jq -r '.items | length' data/resources/apple_beta_feed.json 2>/dev/null || echo "parse_error")
            echo "   Beta count: $FEED_COUNT"
          else
            echo "‚ùå apple_beta_feed.json does not exist"
          fi
          
          if [ -f "data/resources/apple_beta_os_history.json" ]; then
            echo "‚úÖ apple_beta_os_history.json exists:"
            ls -la data/resources/apple_beta_os_history.json
            echo "   Current hash: $(sha256sum data/resources/apple_beta_os_history.json | cut -d' ' -f1)"
            echo "   Size: $(wc -c < data/resources/apple_beta_os_history.json) bytes"
            echo "   Modified: $(stat -c %Y data/resources/apple_beta_os_history.json) ($(date -d @$(stat -c %Y data/resources/apple_beta_os_history.json)))"
          else
            echo "‚ùå apple_beta_os_history.json does not exist"
          fi

      - name: Test individual beta gathering (Method 1)
        run: |
          echo "üß™ Method 1: Individual beta gathering (sofa-gather beta)"
          
          export RUST_LOG=debug
          export RUST_BACKTRACE=full
          
          # Test in completely isolated environment
          BETA_OUTPUT="debug_individual_beta.json"
          rm -f "$BETA_OUTPUT"
          
          echo "üßπ Clearing any cache that might interfere..."
          rm -rf ~/.cache/sofa* /tmp/sofa* 2>/dev/null || true
          
          echo "Running: ./bin/sofa-gather beta --output $BETA_OUTPUT"
          
          if timeout 120 ./bin/sofa-gather beta --output "$BETA_OUTPUT" 2>&1 | tee logs/individual_beta.log; then
            echo "‚úÖ Individual beta gathering completed"
            
            if [ -f "$BETA_OUTPUT" ]; then
              echo "üìä Individual beta output:"
              ls -la "$BETA_OUTPUT"
              echo "   Hash: $(sha256sum $BETA_OUTPUT | cut -d' ' -f1)"
              echo "   Size: $(wc -c < $BETA_OUTPUT) bytes"
              ITEMS=$(jq -r '.items | length' "$BETA_OUTPUT" 2>/dev/null || echo "parse_error")
              echo "   Items: $ITEMS"
              
              if [ "$ITEMS" != "parse_error" ] && [ "$ITEMS" -gt 0 ]; then
                echo "   Sample item:"
                jq -r '.items[0] | {title, version, build}' "$BETA_OUTPUT" 2>/dev/null | head -5
              fi
            else
              echo "‚ùå No individual beta output file created"
            fi
          else
            echo "‚ùå Individual beta gathering failed"
            echo "Error log:"
            tail -20 logs/individual_beta.log || echo "No log file"
          fi

      - name: Test pipeline method (Method 2)
        run: |
          echo "üß™ Method 2: Pipeline method (sofa-gather all)"
          
          export RUST_LOG=debug
          export RUST_BACKTRACE=full
          
          # COMPLETELY clear data directory and recreate fresh
          echo "üßπ Clearing all existing data to test fresh generation..."
          rm -rf data/
          mkdir -p data/resources data/cache logs
          
          echo "üìä Confirming data directory is empty:"
          ls -la data/resources/ 2>/dev/null || echo "No resources directory (as expected)"
          find data/ -name "*.json" 2>/dev/null || echo "No JSON files found (as expected)"
          
          echo "Running: ./bin/sofa-gather all --continue-on-error"
          
          # Show exactly what gets created and when
          echo "üìä Directory state BEFORE running gather:"
          find data/ -name "*.json" -ls 2>/dev/null || echo "No JSON files before gather"
          
          BEFORE_TIME=$(date +%s)
          
          if timeout 300 ./bin/sofa-gather all --continue-on-error 2>&1 | tee logs/pipeline_all.log; then
            echo "‚úÖ Pipeline 'all' gathering completed"
            
            AFTER_TIME=$(date +%s)
            echo "üìä Directory state AFTER running gather:"
            find data/ -name "*.json" -ls 2>/dev/null || echo "No JSON files after gather"
            
            echo "üìä Files created during this run (newer than $BEFORE_TIME):"
            find data/ -name "*.json" -newermt "@$BEFORE_TIME" -ls 2>/dev/null || echo "No files created during this run"
            
            echo "üìä All resources after pipeline run:"
            ls -la data/resources/ 2>/dev/null || echo "No resources directory"
            
            # Check specifically for beta files
            if [ -f "data/resources/apple_beta_feed.json" ]; then
              echo "‚úÖ Pipeline created apple_beta_feed.json:"
              ls -la data/resources/apple_beta_feed.json
              echo "   Hash: $(sha256sum data/resources/apple_beta_feed.json | cut -d' ' -f1)"
              ITEMS=$(jq -r '.items | length' data/resources/apple_beta_feed.json 2>/dev/null || echo "parse_error")
              echo "   Items: $ITEMS"
            else
              echo "‚ùå Pipeline did not create apple_beta_feed.json"
            fi
            
            if [ -f "data/resources/apple_beta_os_history.json" ]; then
              echo "‚úÖ Pipeline created apple_beta_os_history.json:"
              ls -la data/resources/apple_beta_os_history.json
              echo "   Hash: $(sha256sum data/resources/apple_beta_os_history.json | cut -d' ' -f1)"
            else
              echo "‚ùå Pipeline did not create apple_beta_os_history.json"
            fi
          else
            echo "‚ùå Pipeline 'all' gathering failed"
            echo "Error log:"
            tail -30 logs/pipeline_all.log || echo "No log file"
          fi

      - name: Compare methods and analyze differences
        if: always()
        run: |
          echo "üîç Comparing methods and analyzing results..."
          
          echo "üìä File comparison:"
          
          # Individual method file
          if [ -f "debug_individual_beta.json" ]; then
            IND_HASH=$(sha256sum debug_individual_beta.json | cut -d' ' -f1)
            IND_SIZE=$(wc -c < debug_individual_beta.json)
            IND_ITEMS=$(jq -r '.items | length' debug_individual_beta.json 2>/dev/null || echo "parse_error")
            echo "Individual method: $IND_SIZE bytes, $IND_ITEMS items, hash: $IND_HASH"
          else
            echo "Individual method: NO FILE CREATED"
          fi
          
          # Pipeline method file
          if [ -f "data/resources/apple_beta_feed.json" ]; then
            PIPE_HASH=$(sha256sum data/resources/apple_beta_feed.json | cut -d' ' -f1)
            PIPE_SIZE=$(wc -c < data/resources/apple_beta_feed.json)
            PIPE_ITEMS=$(jq -r '.items | length' data/resources/apple_beta_feed.json 2>/dev/null || echo "parse_error")
            echo "Pipeline method:   $PIPE_SIZE bytes, $PIPE_ITEMS items, hash: $PIPE_HASH"
          else
            echo "Pipeline method: NO FILE CREATED"
          fi
          
          # Compare if both exist
          if [ -f "debug_individual_beta.json" ] && [ -f "data/resources/apple_beta_feed.json" ]; then
            if cmp -s debug_individual_beta.json data/resources/apple_beta_feed.json; then
              echo "‚úÖ Files are identical"
            else
              echo "üîÑ Files differ - analyzing differences..."
              
              # Show differences if both are valid JSON
              if jq empty debug_individual_beta.json 2>/dev/null && jq empty data/resources/apple_beta_feed.json 2>/dev/null; then
                echo "Individual UpdateHash: $(jq -r '.UpdateHash // "none"' debug_individual_beta.json)"
                echo "Pipeline UpdateHash:   $(jq -r '.UpdateHash // "none"' data/resources/apple_beta_feed.json)"
                
                echo "Individual created_at: $(jq -r '.created_at // "none"' debug_individual_beta.json)"
                echo "Pipeline created_at:   $(jq -r '.created_at // "none"' data/resources/apple_beta_feed.json)"
              fi
            fi
          fi

      - name: Test direct Apple RSS access
        if: always()
        run: |
          echo "üçé Testing direct Apple Beta RSS access..."
          
          BETA_RSS_URL="https://developer.apple.com/rss/betas.rss"
          echo "URL: $BETA_RSS_URL"
          
          if curl -I -s --max-time 30 "$BETA_RSS_URL"; then
            echo "‚úÖ Can access beta RSS feed"
            echo "üìÑ RSS content sample:"
            curl -s --max-time 30 "$BETA_RSS_URL" | head -20
            
            echo "üîç Recent beta mentions:"
            curl -s --max-time 30 "$BETA_RSS_URL" | grep -i "beta\|rc" | head -10 || echo "No betas found"
          else
            echo "‚ùå Cannot access beta RSS feed"
          fi

      - name: Environment and process analysis
        if: always()
        run: |
          echo "üîß Environment Analysis:"
          echo "RUST_LOG: ${RUST_LOG:-not set}"
          echo "RUST_BACKTRACE: ${RUST_BACKTRACE:-not set}"
          echo "PATH: $PATH"
          echo "PWD: $(pwd)"
          echo "USER: $(whoami)"
          echo "HOME: $HOME"
          
          echo "üìä Process analysis during gathering:"
          echo "Network connections during beta gathering:"
          netstat -tuln | head -10 || ss -tuln | head -10 || echo "No network info"
          
          echo "üîç SSL/TLS verification test:"
          echo | openssl s_client -connect developer.apple.com:443 -servername developer.apple.com 2>/dev/null | grep -A5 -B5 "Verification" || echo "SSL test failed"

      - name: Log analysis and summary
        if: always()
        run: |
          echo "üìã Log Analysis Summary:"
          
          echo "=== INDIVIDUAL BETA LOG ==="
          if [ -f "logs/individual_beta.log" ]; then
            echo "Last 30 lines of individual beta log:"
            tail -30 logs/individual_beta.log
            echo ""
            echo "Errors/warnings in individual log:"
            grep -i "error\|warning\|failed\|panic" logs/individual_beta.log || echo "No errors found"
          else
            echo "No individual beta log found"
          fi
          
          echo ""
          echo "=== PIPELINE ALL LOG ==="
          if [ -f "logs/pipeline_all.log" ]; then
            echo "Last 30 lines of pipeline all log:"
            tail -30 logs/pipeline_all.log
            echo ""
            echo "Errors/warnings in pipeline log:"
            grep -i "error\|warning\|failed\|panic" logs/pipeline_all.log || echo "No errors found"
            echo ""
            echo "Beta-specific mentions in pipeline log:"
            grep -i "beta" logs/pipeline_all.log || echo "No beta mentions"
          else
            echo "No pipeline all log found"
          fi

      - name: Upload all debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: complete-beta-debug-${{ github.run_number }}
          path: |
            logs/
            debug_individual_beta.json
            data/resources/
            *.json
          retention-days: 7
          if-no-files-found: warn

      - name: Create comprehensive debug summary
        if: always()
        run: |
          echo "## üêõ Complete Beta Gathering Debug Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Method Comparison" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "debug_individual_beta.json" ]; then
            IND_SIZE=$(wc -c < debug_individual_beta.json)
            IND_ITEMS=$(jq -r '.items | length' debug_individual_beta.json 2>/dev/null || echo "parse_error")
            echo "- **Individual method**: ‚úÖ $IND_SIZE bytes, $IND_ITEMS items" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Individual method**: ‚ùå No output file" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "data/resources/apple_beta_feed.json" ]; then
            PIPE_SIZE=$(wc -c < data/resources/apple_beta_feed.json)
            PIPE_ITEMS=$(jq -r '.items | length' data/resources/apple_beta_feed.json 2>/dev/null || echo "parse_error")
            echo "- **Pipeline method**: ‚úÖ $PIPE_SIZE bytes, $PIPE_ITEMS items" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Pipeline method**: ‚ùå No output file" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Key Findings" >> $GITHUB_STEP_SUMMARY
          
          # Determine which method worked better
          if [ -f "debug_individual_beta.json" ] && [ -f "data/resources/apple_beta_feed.json" ]; then
            if cmp -s debug_individual_beta.json data/resources/apple_beta_feed.json; then
              echo "- ‚úÖ Both methods produced identical results" >> $GITHUB_STEP_SUMMARY
            else
              echo "- üîÑ Methods produced different results - check artifacts for details" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ -f "debug_individual_beta.json" ]; then
            echo "- ‚ö†Ô∏è Only individual method succeeded" >> $GITHUB_STEP_SUMMARY
          elif [ -f "data/resources/apple_beta_feed.json" ]; then
            echo "- ‚ö†Ô∏è Only pipeline method succeeded" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Both methods failed - check logs for errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîç **Next Steps**: Download artifacts to analyze logs and compare file contents in detail." >> $GITHUB_STEP_SUMMARY