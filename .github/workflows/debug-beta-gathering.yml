name: üêõ Debug Beta Gathering - Streamlined Analysis

on:
  workflow_dispatch:
    inputs:
      commit_results:
        description: 'Commit fresh data to repository'
        type: boolean
        default: true

jobs:
  debug-beta-gather:
    name: Beta Gathering Debug & Update
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: System setup
        run: |
          echo "üñ•Ô∏è System: $(uname -a)"
          echo "üìÖ Time: $(date -u)"
          
          # Install requirements
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl jq
          
          # Install Apple root certificates
          echo "üîê Installing Apple root certificates..."
          sudo curl -f -o /usr/local/share/ca-certificates/apple-root-ca-g3.crt \
            "https://www.apple.com/certificateauthority/AppleRootCA-G3.cer"
          sudo curl -f -o /usr/local/share/ca-certificates/apple-root-ca.crt \
            "https://www.apple.com/certificateauthority/AppleComputerRootCertificate.cer"
          sudo update-ca-certificates
          
      - name: Download SOFA CLI beta3 binaries
        run: |
          echo "üì• Downloading SOFA CLI beta3 binaries..."
          mkdir -p bin logs
          
          DOWNLOAD_URL="https://github.com/headmin/sofa-core-cli/releases/download/v0.1.0-beta3"
          LINUX_ZIP="sofa-core-cli-x86_64-linux-binaries.zip"
          
          curl -L -f -o "$LINUX_ZIP" "$DOWNLOAD_URL/$LINUX_ZIP"
          unzip -o -j "$LINUX_ZIP" -d bin/
          chmod +x bin/*
          rm "$LINUX_ZIP"
          
          echo "‚úÖ Binary ready: $(./bin/sofa-gather --version 2>/dev/null || echo 'version failed')"

      - name: Check current beta data state
        run: |
          echo "üìä Current beta data in repository:"
          
          if [ -f "data/resources/apple_beta_feed.json" ]; then
            echo "‚úÖ apple_beta_feed.json exists:"
            echo "   Size: $(wc -c < data/resources/apple_beta_feed.json) bytes"
            echo "   Modified: $(stat -c %Y data/resources/apple_beta_feed.json) ($(date -d @$(stat -c %Y data/resources/apple_beta_feed.json)))"
            echo "   Items: $(jq -r '.items | length' data/resources/apple_beta_feed.json 2>/dev/null || echo 'parse_error')"
            echo "   Hash: $(jq -r '.UpdateHash // "none"' data/resources/apple_beta_feed.json 2>/dev/null)"
            echo "   Created: $(jq -r '.created_at // "none"' data/resources/apple_beta_feed.json 2>/dev/null)"
            
            echo "   Latest beta items:"
            jq -r '.items[0:3] | .[] | "   - \(.platform) \(.version) (\(.build)) - \(.released)"' data/resources/apple_beta_feed.json 2>/dev/null || echo "   Could not parse items"
          else
            echo "‚ùå apple_beta_feed.json does not exist"
          fi
          
          if [ -f "data/resources/apple_beta_os_history.json" ]; then
            echo "‚úÖ apple_beta_os_history.json exists:"
            echo "   Size: $(wc -c < data/resources/apple_beta_os_history.json) bytes"
            echo "   Modified: $(stat -c %Y data/resources/apple_beta_os_history.json) ($(date -d @$(stat -c %Y data/resources/apple_beta_os_history.json)))"
            echo "   Entries: $(jq -r 'length' data/resources/apple_beta_os_history.json 2>/dev/null || echo 'parse_error')"
          else
            echo "‚ùå apple_beta_os_history.json does not exist"
          fi

      - name: Test Apple developer site access
        run: |
          echo "üçé Testing Apple developer site connectivity..."
          BETA_RSS_URL="https://developer.apple.com/rss/betas.rss"
          
          if curl -I -s --max-time 30 "$BETA_RSS_URL"; then
            echo "‚úÖ Can reach Apple developer RSS"
            echo "üìä RSS content sample:"
            curl -s --max-time 30 "$BETA_RSS_URL" | head -10
          else
            echo "‚ùå Cannot reach Apple developer RSS"
          fi

      - name: Run sofa-gather all and analyze results
        run: |
          echo "üß™ Running sofa-gather all to update repository data..."
          
          # Setup environment
          export RUST_LOG=info
          mkdir -p data/resources data/cache
          
          # Create before snapshot
          echo "üìä Files before gather:"
          find data/resources -name "*.json" -ls 2>/dev/null || echo "No JSON files"
          
          BEFORE_TIME=$(date +%s)
          
          # Run the gather command
          if timeout 300 ./bin/sofa-gather all --continue-on-error 2>&1 | tee logs/gather_all.log; then
            echo "‚úÖ sofa-gather all completed"
            
            # Create after snapshot  
            echo "üìä Files after gather:"
            find data/resources -name "*.json" -ls 2>/dev/null || echo "No JSON files"
            
            echo "üìä Files modified during this run:"
            find data/resources -name "*.json" -newermt "@$BEFORE_TIME" -ls 2>/dev/null || echo "No files modified"
            
            # Focus on beta files specifically
            echo ""
            echo "üîç Beta file analysis:"
            
            if [ -f "data/resources/apple_beta_feed.json" ]; then
              NEW_SIZE=$(wc -c < data/resources/apple_beta_feed.json)
              NEW_ITEMS=$(jq -r '.items | length' data/resources/apple_beta_feed.json 2>/dev/null || echo 'parse_error')
              NEW_HASH=$(jq -r '.UpdateHash // "none"' data/resources/apple_beta_feed.json 2>/dev/null)
              NEW_CREATED=$(jq -r '.created_at // "none"' data/resources/apple_beta_feed.json 2>/dev/null)
              
              echo "‚úÖ apple_beta_feed.json after gather:"
              echo "   Size: $NEW_SIZE bytes"
              echo "   Items: $NEW_ITEMS"
              echo "   Hash: $NEW_HASH"  
              echo "   Created: $NEW_CREATED"
              echo "   Modified: $(stat -c %Y data/resources/apple_beta_feed.json) ($(date -d @$(stat -c %Y data/resources/apple_beta_feed.json)))"
              
              if [ "$NEW_ITEMS" != "parse_error" ] && [ "$NEW_ITEMS" -gt 0 ]; then
                echo "   Recent betas:"
                jq -r '.items[0:5] | .[] | "   - \(.platform) \(.version) (\(.build)) - \(.released)"' data/resources/apple_beta_feed.json 2>/dev/null || echo "   Could not parse recent items"
              fi
              
              # Check if file was updated during this run
              FILE_MTIME=$(stat -c %Y data/resources/apple_beta_feed.json)
              if [ $FILE_MTIME -ge $BEFORE_TIME ]; then
                echo "   üîÑ File was UPDATED during this gather run"
              else
                echo "   üìã File was NOT modified during this gather run"
              fi
            else
              echo "‚ùå apple_beta_feed.json still missing after gather"
            fi
            
            if [ -f "data/resources/apple_beta_os_history.json" ]; then
              HISTORY_SIZE=$(wc -c < data/resources/apple_beta_os_history.json)
              HISTORY_ENTRIES=$(jq -r 'length' data/resources/apple_beta_os_history.json 2>/dev/null || echo 'parse_error')
              HISTORY_MTIME=$(stat -c %Y data/resources/apple_beta_os_history.json)
              
              echo "‚úÖ apple_beta_os_history.json after gather:"
              echo "   Size: $HISTORY_SIZE bytes"
              echo "   Entries: $HISTORY_ENTRIES"
              echo "   Modified: $HISTORY_MTIME ($(date -d @$HISTORY_MTIME))"
              
              if [ $HISTORY_MTIME -ge $BEFORE_TIME ]; then
                echo "   üîÑ File was UPDATED during this gather run"
              else
                echo "   üìã File was NOT modified during this gather run"
              fi
            else
              echo "‚ùå apple_beta_os_history.json still missing after gather"
            fi
            
          else
            echo "‚ùå sofa-gather all failed"
            echo "üìã Error log:"
            tail -20 logs/gather_all.log || echo "No log available"
          fi

      - name: Analyze gather logs for beta-specific issues
        if: always()
        run: |
          echo "üîç Analyzing gather logs for beta-related issues..."
          
          if [ -f "logs/gather_all.log" ]; then
            echo "üìä Full log summary:"
            echo "   Lines: $(wc -l < logs/gather_all.log)"
            echo "   Size: $(wc -c < logs/gather_all.log) bytes"
            
            echo ""
            echo "üîç Beta-specific log entries:"
            grep -i "beta\|Apple Beta" logs/gather_all.log || echo "   No beta mentions found"
            
            echo ""
            echo "‚ùå Error/warning entries:"
            grep -iE "error|warning|failed|panic|timeout" logs/gather_all.log || echo "   No errors/warnings found"
            
            echo ""
            echo "‚úÖ Success entries:"
            grep -iE "success|‚úì|completed" logs/gather_all.log || echo "   No success messages found"
            
            echo ""
            echo "üåê Network-related entries:"
            grep -iE "ssl|tls|certificate|connection|network" logs/gather_all.log || echo "   No network issues found"
          else
            echo "‚ùå No gather log found"
          fi

      - name: Commit fresh data to repository
        if: github.event.inputs.commit_results == 'true'
        run: |
          echo "üìù Checking for changes to commit..."
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "Linux Beta Debug"
          
          # Add all resource files that may have been updated
          git add data/resources/
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit - data is identical"
          else
            echo "üìù Changes detected, creating commit..."
            
            # Show what changed
            echo "Changed files:"
            git diff --staged --name-only
            
            # Create commit with details
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            git commit -m "üêß Update SOFA data from Linux beta3 debug run - $TIMESTAMP

            Linux debug workflow gathered fresh data using beta3 binaries.
            Changes detected in data/resources/ after running sofa-gather all.
            This preserves any fresh beta data generated on Linux CI runner."
            
            # Push changes
            git push
            echo "‚úÖ Fresh data committed and pushed to repository"
          fi

      - name: Create debug summary
        if: always()
        run: |
          echo "## üêõ Beta Gathering Debug Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Key Findings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check beta file status
          if [ -f "data/resources/apple_beta_feed.json" ]; then
            SIZE=$(wc -c < data/resources/apple_beta_feed.json)
            ITEMS=$(jq -r '.items | length' data/resources/apple_beta_feed.json 2>/dev/null || echo 'parse_error')
            CREATED=$(jq -r '.created_at // "unknown"' data/resources/apple_beta_feed.json 2>/dev/null)
            
            echo "- **apple_beta_feed.json**: ‚úÖ $SIZE bytes, $ITEMS items" >> $GITHUB_STEP_SUMMARY
            echo "- **Created**: $CREATED" >> $GITHUB_STEP_SUMMARY
            
            if [ "$ITEMS" != "parse_error" ] && [ "$ITEMS" -gt 5 ]; then
              echo "- **Status**: ‚úÖ Good data with multiple beta entries" >> $GITHUB_STEP_SUMMARY
            elif [ "$ITEMS" != "parse_error" ] && [ "$ITEMS" -gt 0 ]; then
              echo "- **Status**: ‚ö†Ô∏è Limited beta data ($ITEMS items)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ‚ùå Invalid or empty beta data" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **apple_beta_feed.json**: ‚ùå Missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for gather success/failure
          if [ -f "logs/gather_all.log" ]; then
            if grep -q "‚úì Apple Beta feed fetched successfully" logs/gather_all.log; then
              echo "- **Beta gathering**: ‚úÖ Reported success in logs" >> $GITHUB_STEP_SUMMARY
            elif grep -q -i "beta.*error\|beta.*failed" logs/gather_all.log; then
              echo "- **Beta gathering**: ‚ùå Errors reported in logs" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Beta gathering**: ‚ö†Ô∏è Unclear status - check logs" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Next Steps" >> $GITHUB_STEP_SUMMARY
          if grep -q "‚úì Apple Beta feed fetched successfully" logs/gather_all.log 2>/dev/null && [ -f "data/resources/apple_beta_feed.json" ]; then
            echo "‚úÖ **Success**: Beta gathering appears to be working on Linux!" >> $GITHUB_STEP_SUMMARY
          else
            echo "üîç **Investigation needed**: Check uploaded logs for specific beta gathering failures." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: beta-debug-streamlined-${{ github.run_number }}
          path: |
            logs/
            data/resources/apple_beta*.json
          retention-days: 7
          if-no-files-found: warn