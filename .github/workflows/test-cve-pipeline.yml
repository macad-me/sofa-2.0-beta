name: üîç Test CVE Pipeline

on:
  schedule:
    # Run at 6:00 AM and 6:00 PM UTC, Monday through Friday
    - cron: '0 6,18 * * 1-5'
  workflow_dispatch:
    inputs:
      use_api_key:
        description: 'Use API key for CVE enrichment'
        type: boolean
        default: true
      debug_mode:
        description: 'Enable verbose debugging'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.13'

jobs:
  test-cve-pipeline:
    name: Test CVE Pipeline
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "scripts/sofa_pipeline.py"
          
      - name: Download SOFA CLI binaries
        run: |
          echo "üì• Downloading SOFA CLI binaries..."
          mkdir -p bin
          
          DOWNLOAD_URL="https://github.com/headmin/sofa-core-cli/releases/download/v0.1.0-beta1"
          LINUX_ZIP="sofa-core-cli-x86_64-linux-binaries.zip"
          
          curl -L -f -o "$LINUX_ZIP" "$DOWNLOAD_URL/$LINUX_ZIP"
          unzip -o -j "$LINUX_ZIP" -d bin/
          chmod +x bin/*
          rm "$LINUX_ZIP"
          
          echo "Downloaded binaries:"
          ls -la bin/
          
      - name: Prepare test data
        run: |
          echo "üìã Preparing test data for CVE pipeline..."

          # Create necessary directories
          mkdir -p data/resources
          mkdir -p data/feeds
          mkdir -p data/cache/html
          mkdir -p logs

          # We need Apple security releases data for CVE extraction
          # Run gather and fetch stages to get the required data
          export PATH="./bin:$PATH"

          echo "Running gather stage to get Apple security data..."
          if uv run --script scripts/sofa_pipeline.py run --stage gather; then
            echo "‚úÖ Gather completed"
          else
            echo "‚ùå Gather failed - continuing anyway"
          fi

          echo "Running fetch stage to get Apple security releases..."
          if uv run --script scripts/sofa_pipeline.py run --stage fetch; then
            echo "‚úÖ Fetch completed - ready for CVE processing"
          else
            echo "‚ùå Fetch failed - will try CVE pipeline anyway"
          fi
          
      - name: Test CVE pipeline (Direct Binary)
        env:
          VULNCHECK_API_KEY: ${{ secrets.VULNCHECK_API_KEY }}
        run: |
          echo "üîç Testing CVE pipeline with direct binary calls..."

          export PATH="./bin:$PATH"

          # For scheduled runs, always use API key if available
          # For manual runs, respect the use_api_key input
          USE_API_KEY="true"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.use_api_key }}" == "false" ]; then
            USE_API_KEY="false"
          fi

          if [ "$USE_API_KEY" == "true" ]; then
            if [ -z "$VULNCHECK_API_KEY" ]; then
              echo "‚ùå VULNCHECK_API_KEY secret not set"
              echo "## ‚ùå CVE Pipeline Failed" >> $GITHUB_STEP_SUMMARY
              echo "VULNCHECK_API_KEY secret not configured" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
            echo "‚úÖ API key configured: ${VULNCHECK_API_KEY:0:8}..."
            echo "Running with API key enrichment"
          else
            echo "‚ÑπÔ∏è Running without API key (extract and index only)"
          fi

          echo "Step 1: CVE extraction"
          echo "Checking for Apple security releases data..."
          if [ -f "data/resources/apple_security_releases.json" ]; then
            echo "‚úÖ Apple security releases data found: $(wc -c < data/resources/apple_security_releases.json) bytes"
          else
            echo "‚ö†Ô∏è No Apple security releases data found - CVE extraction may fail"
          fi

          if ./bin/sofa-cve extract; then
            echo "‚úÖ CVE extraction completed"
          else
            echo "‚ùå CVE extraction failed"
            echo "## ‚ùå CVE Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if [ "$USE_API_KEY" == "true" ]; then
            echo "Step 2: CVE enrichment (with API key)"
            if ./bin/sofa-cve enrich; then
              echo "‚úÖ CVE enrichment completed"
            else
              echo "‚ùå CVE enrichment failed"
              echo "## ‚ùå CVE Pipeline Failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "Step 2: Skipping CVE enrichment (no API key)"
          fi

          echo "Step 3: CVE indexing"
          if ./bin/sofa-cve index; then
            echo "‚úÖ CVE indexing completed"
            if [ "$USE_API_KEY" == "true" ]; then
              echo "## ‚úÖ CVE Pipeline Success (With Enrichment)" >> $GITHUB_STEP_SUMMARY
              echo "CVE pipeline completed successfully with API key enrichment" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ‚úÖ CVE Pipeline Success (Extract Only)" >> $GITHUB_STEP_SUMMARY
              echo "CVE pipeline completed successfully (extract and index only)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå CVE indexing failed"
            echo "## ‚ùå CVE Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Show CVE results
        if: always()
        run: |
          echo "üìä CVE Pipeline Results..."
          echo ""

          echo "Generated CVE files:"
          find data/ -name "*cve*" -type f 2>/dev/null | head -10 || echo "No CVE files found"
          echo ""

          echo "Key output files:"
          if [ -f "data/resources/apple_cves_with_context.ndjson" ]; then
            CVE_COUNT=$(wc -l < data/resources/apple_cves_with_context.ndjson)
            echo "‚úÖ CVE extraction: $CVE_COUNT CVEs extracted"
            if [ "$CVE_COUNT" -gt 0 ]; then
              echo "‚úÖ CVE data appears valid (non-empty)"
            else
              echo "‚ö†Ô∏è CVE extraction file is empty"
            fi
          else
            echo "‚ùå No CVE extraction file found"
          fi

          if [ -f "data/feeds/cve_enriched.ndjson" ]; then
            ENRICHED_COUNT=$(wc -l < data/feeds/cve_enriched.ndjson)
            FILE_SIZE=$(stat -c%s data/feeds/cve_enriched.ndjson 2>/dev/null || stat -f%z data/feeds/cve_enriched.ndjson 2>/dev/null)
            echo "‚úÖ CVE enrichment: $ENRICHED_COUNT CVEs enriched ($FILE_SIZE bytes)"
            if [ "$ENRICHED_COUNT" -gt 0 ] && [ "$FILE_SIZE" -gt 1000000 ]; then
              echo "‚úÖ Enriched CVE data looks substantial (>1MB)"
            else
              echo "‚ö†Ô∏è Enriched CVE data seems small - may indicate issues"
            fi
          else
            echo "‚ÑπÔ∏è No CVE enrichment file (expected when API key not used)"
          fi

          echo ""
          echo "Sample CVE data:"
          if [ -f "data/resources/apple_cves_with_context.ndjson" ]; then
            echo "File size: $(wc -c < data/resources/apple_cves_with_context.ndjson) bytes"
            echo "First few lines:"
            head -3 data/resources/apple_cves_with_context.ndjson || echo "Could not read file"
            echo ""
            echo "Trying to parse first CVE ID:"
            head -1 data/resources/apple_cves_with_context.ndjson | jq -r '.cve_id // .id // .cve // "No CVE ID found"' 2>/dev/null || echo "Could not parse JSON"
            echo ""
            echo "Available JSON keys in first record:"
            head -1 data/resources/apple_cves_with_context.ndjson | jq -r 'keys[]' 2>/dev/null | head -5 || echo "Could not parse keys"
            echo ""
            echo "Testing for specific CVE (CVE-2025-43300):"
            if grep -q "CVE-2025-43300" data/resources/apple_cves_with_context.ndjson 2>/dev/null; then
              echo "‚úÖ Found CVE-2025-43300 in extracted data"
              grep "CVE-2025-43300" data/resources/apple_cves_with_context.ndjson | jq -r '.cve_id // .id // .cve' 2>/dev/null || echo "Found but could not parse"
            else
              echo "‚ÑπÔ∏è CVE-2025-43300 not found (may not be in current Apple security releases)"
            fi
          else
            echo "‚ùå No CVE extraction file found"
          fi

          echo ""
          echo "Enriched CVE data:"
          if [ -f "data/feeds/cve_enriched.ndjson" ]; then
            echo "File size: $(wc -c < data/feeds/cve_enriched.ndjson) bytes"
            echo "Sample enriched CVE:"
            head -1 data/feeds/cve_enriched.ndjson | jq -r '.cve_id // .id // .cve // "No CVE ID found"' 2>/dev/null || echo "Could not parse enriched JSON"
            echo ""
            echo "Testing for CVE-2025-43300 in enriched data:"
            if grep -q "CVE-2025-43300" data/feeds/cve_enriched.ndjson 2>/dev/null; then
              echo "‚úÖ Found CVE-2025-43300 in enriched data"
            else
              echo "‚ÑπÔ∏è CVE-2025-43300 not found in enriched data"
            fi
          else
            echo "‚ÑπÔ∏è No enriched CVE file (expected when API key not used)"
          fi

          echo ""
          echo "Enriched CVE data:"
          if [ -f "data/feeds/cve_enriched.ndjson" ]; then
            echo "File size: $(wc -c < data/feeds/cve_enriched.ndjson) bytes"
            echo "Sample enriched CVE:"
            head -1 data/feeds/cve_enriched.ndjson | jq -r '.cve_id // .id // .cve // "No CVE ID found"' 2>/dev/null || echo "Could not parse enriched JSON"
          else
            echo "‚ÑπÔ∏è No enriched CVE file (expected when API key not used)"
          fi

      - name: Upload CVE artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cve-data-${{ github.run_number }}
          path: |
            data/resources/apple_cves_with_context.ndjson
            data/feeds/cve_enriched.ndjson
            data/resources/apple_security_releases.json
            data/resources/kev_catalog.json
            logs/
          retention-days: 30
          if-no-files-found: warn

      - name: Commit and push CVE data
        if: success() && github.event_name == 'schedule'
        run: |
          echo "üìù Committing CVE data to repository..."

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add generated files
          git add data/resources/apple_cves_with_context.ndjson || echo "No CVE extraction file to add"
          git add data/feeds/cve_enriched.ndjson || echo "No CVE enrichment file to add"
          git add data/resources/apple_security_releases.json || echo "No security releases file to add"
          git add data/resources/kev_catalog.json || echo "No KEV catalog file to add"

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            # Create commit with timestamp
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            git commit -m "üîÑ Automated CVE data update - $TIMESTAMP

            - Updated Apple CVE database
            - Refreshed security releases data
            - Updated KEV catalog

            Generated by scheduled workflow run #${{ github.run_number }}"

            # Push changes
            git push
            echo "‚úÖ CVE data committed and pushed to repository"
          fi

      - name: Test direct CVE command
        if: github.event.inputs.debug_mode == true
        run: |
          echo "üß™ Testing sofa-cve binary directly..."
          
          export PATH="./bin:$PATH"
          
          echo "sofa-cve help:"
          ./bin/sofa-cve --help || echo "Help command failed"
          echo ""
          
          echo "sofa-cve version:"
          ./bin/sofa-cve --version || echo "Version command failed"
          echo ""
          
          if [ -f "data/resources/apple_security_releases.json" ]; then
            echo "Testing direct CVE extract:"
            ./bin/sofa-cve extract || echo "Direct extract failed"
          else
            echo "No Apple security releases data found for direct test"
          fi
