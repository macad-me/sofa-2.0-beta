name: 🔍 Test CVE Pipeline

on:
  workflow_dispatch:
    inputs:
      cve_mode:
        description: 'CVE processing mode'
        type: choice
        options:
          - 'extract-only'
          - 'full-enrichment'
        default: 'extract-only'
      debug_mode:
        description: 'Enable verbose debugging'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.13'

jobs:
  test-cve-pipeline:
    name: Test CVE Pipeline
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "scripts/sofa_pipeline.py"
          
      - name: Download SOFA CLI binaries
        run: |
          echo "📥 Downloading SOFA CLI binaries..."
          mkdir -p bin
          
          DOWNLOAD_URL="https://github.com/headmin/sofa-core-cli/releases/download/v0.1.0-beta1"
          LINUX_ZIP="sofa-core-cli-x86_64-linux-binaries.zip"
          
          curl -L -f -o "$LINUX_ZIP" "$DOWNLOAD_URL/$LINUX_ZIP"
          unzip -o -j "$LINUX_ZIP" -d bin/
          chmod +x bin/*
          rm "$LINUX_ZIP"
          
          echo "Downloaded binaries:"
          ls -la bin/
          
      - name: Prepare test data
        run: |
          echo "📋 Preparing test data for CVE pipeline..."

          # Create necessary directories
          mkdir -p data/resources
          mkdir -p data/cache/html

          # We need Apple security releases data for CVE extraction
          # Run gather and fetch stages to get the required data
          export PATH="./bin:$PATH"

          echo "Running gather stage to get Apple security data..."
          if uv run --script scripts/sofa_pipeline.py run --stage gather; then
            echo "✅ Gather completed"
          else
            echo "❌ Gather failed - continuing anyway"
          fi

          echo "Running fetch stage to get Apple security releases..."
          if uv run --script scripts/sofa_pipeline.py run --stage fetch; then
            echo "✅ Fetch completed - ready for CVE processing"
          else
            echo "❌ Fetch failed - will try CVE pipeline anyway"
          fi
          
      - name: Test CVE pipeline (Extract Only)
        if: github.event.inputs.cve_mode == 'extract-only'
        run: |
          echo "🔍 Testing CVE pipeline in EXTRACT-ONLY mode (no enrichment)..."

          export PATH="./bin:$PATH"

          # Test direct sofa-cve commands without enrichment
          echo "Step 1: CVE extraction"
          if ./bin/sofa-cve extract; then
            echo "✅ CVE extraction completed"
          else
            echo "❌ CVE extraction failed"
            exit 1
          fi

          echo "Step 2: CVE indexing"
          if ./bin/sofa-cve index; then
            echo "✅ CVE indexing completed"
            echo "## ✅ CVE Pipeline Success (Extract Only)" >> $GITHUB_STEP_SUMMARY
            echo "CVE extraction and indexing completed without API key" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CVE indexing failed"
            echo "## ❌ CVE Pipeline Failed (Extract Only)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Test CVE pipeline (Full Enrichment)
        if: github.event.inputs.cve_mode == 'full-enrichment'
        env:
          VULNCHECK_API_KEY: ${{ secrets.VULNCHECK_API_KEY }}
        run: |
          echo "🔍 Testing CVE pipeline with FULL ENRICHMENT (using API key)..."
          
          if [ -z "$VULNCHECK_API_KEY" ]; then
            echo "❌ VULNCHECK_API_KEY secret not set"
            echo "## ❌ CVE Pipeline Failed (Full Mode)" >> $GITHUB_STEP_SUMMARY
            echo "VULNCHECK_API_KEY secret not configured" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          export PATH="./bin:$PATH"
          
          echo "API key configured: ${VULNCHECK_API_KEY:0:8}..."
          echo "Running: uv run --script scripts/sofa_pipeline.py run --stage cve --full-cve"
          if uv run --script scripts/sofa_pipeline.py run --stage cve --full-cve; then
            echo "✅ CVE pipeline (full mode) completed successfully"
            echo "## ✅ CVE Pipeline Success (Full Mode)" >> $GITHUB_STEP_SUMMARY
            echo "CVE extraction and full enrichment completed with API key" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CVE pipeline (full mode) failed"
            echo "## ❌ CVE Pipeline Failed (Full Mode)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Show CVE results
        if: always()
        run: |
          echo "📊 CVE Pipeline Results..."
          echo ""

          echo "Generated CVE files:"
          find data/ -name "*cve*" -type f 2>/dev/null | head -10 || echo "No CVE files found"
          echo ""

          echo "Key output files:"
          if [ -f "data/resources/apple_cves_with_context.ndjson" ]; then
            echo "✅ CVE extraction: $(wc -l < data/resources/apple_cves_with_context.ndjson) CVEs extracted"
          else
            echo "❌ No CVE extraction file found"
          fi

          if [ -f "data/feeds/cve_enriched.ndjson" ]; then
            echo "✅ CVE enrichment: $(wc -l < data/feeds/cve_enriched.ndjson) CVEs enriched"
          else
            echo "ℹ️ No CVE enrichment file (expected for extract-only mode)"
          fi

          echo ""
          echo "Sample CVE data:"
          if [ -f "data/resources/apple_cves_with_context.ndjson" ]; then
            head -1 data/resources/apple_cves_with_context.ndjson | jq -r '.cve_id // .id // "No CVE ID"' 2>/dev/null || echo "Could not parse CVE data"
          fi
          
      - name: Test direct CVE command
        if: github.event.inputs.debug_mode == true
        run: |
          echo "🧪 Testing sofa-cve binary directly..."
          
          export PATH="./bin:$PATH"
          
          echo "sofa-cve help:"
          ./bin/sofa-cve --help || echo "Help command failed"
          echo ""
          
          echo "sofa-cve version:"
          ./bin/sofa-cve --version || echo "Version command failed"
          echo ""
          
          if [ -f "data/resources/apple_security_releases.json" ]; then
            echo "Testing direct CVE extract:"
            ./bin/sofa-cve extract || echo "Direct extract failed"
          else
            echo "No Apple security releases data found for direct test"
          fi
