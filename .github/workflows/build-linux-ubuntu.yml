name: 🐧 Build Linux Binaries on GitHub Ubuntu

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source repository to build from'
        required: true
        default: 'headmin/sofa-core-cli'
      source_ref:
        description: 'Branch, tag, or commit to build'
        required: true  
        default: 'main'
      upload_to_release:
        description: 'Upload binaries to a new GitHub release'
        type: boolean
        default: false
      release_tag:
        description: 'Release tag (if uploading to release)'
        required: false
        default: 'v0.1.0-beta2-fixed'
  schedule:
    # Build weekly on Sundays at 2 AM UTC to keep artifacts fresh
    - cron: '0 2 * * 0'

env:
  RUST_BACKTRACE: full
  CARGO_TERM_COLOR: always

jobs:
  build-ubuntu-linux:
    name: Build x86_64 Linux Binaries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.source_repo || 'headmin/sofa-core-cli' }}
          ref: ${{ github.event.inputs.source_ref || 'main' }}
          
      - name: Show build environment
        run: |
          echo "## 🐧 Ubuntu Linux Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**OS:** $(lsb_release -d | cut -f2)" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture:** $(uname -m)" >> $GITHUB_STEP_SUMMARY
          echo "**Kernel:** $(uname -r)" >> $GITHUB_STEP_SUMMARY
          echo "**Source:** ${{ github.event.inputs.source_repo || 'headmin/sofa-core-cli' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref:** ${{ github.event.inputs.source_ref || 'main' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "🖥️ Build Environment Details:"
          uname -a
          lscpu | head -10 || echo "lscpu not available"
          free -h
          df -h . | head -2
          
      - name: Install system dependencies
        run: |
          echo "📦 Installing build dependencies..."
          
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            musl-tools \
            musl-dev \
            ca-certificates \
            curl \
            jq
            
          echo "✅ System dependencies installed"
          
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-musl
          override: true
          components: rustfmt, clippy
          
      - name: Show Rust environment
        run: |
          echo "🦀 Rust Environment:"
          rustc --version
          cargo --version
          rustup show
          
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Build all binaries (static musl)
        run: |
          echo "🏗️ Building all SOFA CLI binaries with musl for maximum compatibility..."
          echo ""
          
          # Build statically linked binaries
          export RUSTFLAGS='-C target-feature=+crt-static'
          
          echo "Building with musl target for static linking..."
          time cargo build --release --target x86_64-unknown-linux-musl
          
          echo ""
          echo "✅ Build completed successfully"
          echo ""
          
          echo "📁 Generated binaries:"
          ls -la target/x86_64-unknown-linux-musl/release/sofa-*
          echo ""
          
          echo "🔍 Binary details:"
          for binary in target/x86_64-unknown-linux-musl/release/sofa-*; do
            if [ -x "$binary" ]; then
              echo "$(basename "$binary"):"
              file "$binary"
              echo "  Size: $(stat -c%s "$binary" | numfmt --to=iec-i --suffix=B)"
              echo ""
            fi
          done
          
      - name: Test binary execution
        run: |
          echo "🧪 Testing binary execution and functionality..."
          echo ""
          
          cd target/x86_64-unknown-linux-musl/release/
          
          # Test each binary can execute and show help
          for binary in sofa-*; do
            if [ -x "$binary" ]; then
              echo "Testing $binary..."
              if timeout 30 "./$binary" --help >/dev/null 2>&1; then
                echo "  ✅ $binary executes successfully"
              else
                echo "  ❌ $binary failed to execute"
              fi
            fi
          done
          echo ""
          
          # Test specific functionality
          echo "🔍 Testing specific gather functionality..."
          mkdir -p test_config test_output
          
          # Create minimal config for testing
          cat > test_config/gather.toml << 'EOF'
          [output]
          directory = "../test_output"
          
          [features]
          fetch_beta = true
          fetch_kev = true
          
          [urls]
          apple_developer_releases = "https://developer.apple.com/news/releases/"
          kev_catalog = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
          EOF
          
          # Test beta gathering specifically (the problem we're solving)
          echo "Testing beta gathering..."
          if timeout 60 ./sofa-gather --insecure beta --output test_output/beta_test.json; then
            if [ -f "test_output/beta_test.json" ]; then
              size=$(stat -c%s test_output/beta_test.json)
              releases=$(jq '.items | length' test_output/beta_test.json 2>/dev/null || echo "0")
              created=$(jq -r '.created_at' test_output/beta_test.json 2>/dev/null || echo "unknown")
              echo "  ✅ Beta gathering successful: $size bytes, $releases releases"
              echo "  📅 Created: $created"
            else
              echo "  ❌ Beta file not created"
            fi
          else
            echo "  ❌ Beta gathering failed"
          fi
          
      - name: Package binaries for distribution
        run: |
          echo "📦 Packaging binaries for distribution..."
          
          mkdir -p dist
          
          # Copy binaries to dist directory
          cp target/x86_64-unknown-linux-musl/release/sofa-* dist/
          
          # Create comprehensive zip package
          cd dist
          zip -r ../sofa-core-cli-x86_64-linux-binaries.zip .
          cd ..
          
          # Create individual binary archives for flexibility
          cd target/x86_64-unknown-linux-musl/release/
          tar czf ../../../sofa-gather-linux.tar.gz sofa-gather
          tar czf ../../../sofa-fetch-linux.tar.gz sofa-fetch  
          tar czf ../../../sofa-build-linux.tar.gz sofa-build
          tar czf ../../../sofa-cve-linux.tar.gz sofa-cve
          cd ../../..
          
          echo "✅ Packaging completed"
          echo ""
          echo "📁 Distribution packages:"
          ls -la *.zip *.tar.gz
          
      - name: Validate package contents
        run: |
          echo "🔍 Validating package contents..."
          echo ""
          
          echo "Main package contents:"
          unzip -l sofa-core-cli-x86_64-linux-binaries.zip
          echo ""
          
          echo "Package checksums:"
          sha256sum *.zip *.tar.gz
          
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sofa-cli-linux-ubuntu-${{ github.run_number }}
          path: |
            sofa-core-cli-x86_64-linux-binaries.zip
            sofa-*-linux.tar.gz
            target/x86_64-unknown-linux-musl/release/sofa-*
            test_output/
          retention-days: 90
          if-no-files-found: error
          
      - name: Create GitHub release (if requested)
        if: github.event.inputs.upload_to_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag || 'v0.1.0-beta2-fixed' }}
          name: SOFA CLI v0.1.0-beta2 (Certificate Fixed)
          body: |
            ## 🔧 SOFA CLI Binaries with Certificate Support
            
            **Critical Fixes:**
            - ✅ **SSL Certificate Support**: Switched to native-tls backend that reads system certificates
            - ✅ **Beta Gathering Fixed**: Apple Developer site SSL validation now works
            - ✅ **Consistent Sorting**: Deterministic output ordering prevents unnecessary commit changes
            - ✅ **Historical Date Fixes**: Old OS releases show correct historical dates
            
            **Built from:** `${{ github.event.inputs.source_repo }}@${{ github.event.inputs.source_ref }}`
            **Build Date:** $(date -u)
            **Target:** x86_64-unknown-linux-musl (static linking)
            
            ## 📥 Downloads
            
            **Main Package:** `sofa-core-cli-x86_64-linux-binaries.zip` - All binaries
            **Individual:** `sofa-gather-linux.tar.gz`, `sofa-fetch-linux.tar.gz`, etc.
            
            ## 🚀 Usage
            
            1. Download and extract binaries to your `bin/` directory
            2. Beta gathering will work immediately with proper SSL validation
            3. All outputs will have consistent ordering (no fluctuating commits)
            4. Historical OS releases will show correct dates
            
            This resolves the operational reliability issues with beta data gathering in automation.
          files: |
            sofa-core-cli-x86_64-linux-binaries.zip
            sofa-*-linux.tar.gz
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build summary
        if: always()
        run: |
          echo "## 🏗️ Linux Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ ${{ job.status }} == "success" ]; then
            echo "✅ **Build Status:** SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Artifacts Created:**" >> $GITHUB_STEP_SUMMARY
            echo "- Main package: \`sofa-core-cli-x86_64-linux-binaries.zip\`" >> $GITHUB_STEP_SUMMARY
            echo "- Individual binaries: \`sofa-*-linux.tar.gz\`" >> $GITHUB_STEP_SUMMARY
            echo "- Test outputs: \`test_output/\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Download artifacts from this workflow run" >> $GITHUB_STEP_SUMMARY
            echo "2. Replace binaries in your automation's \`bin/\` directory" >> $GITHUB_STEP_SUMMARY
            echo "3. Test beta gathering - should work with SSL certificates" >> $GITHUB_STEP_SUMMARY
            echo "4. Enjoy consistent file ordering and operational reliability" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status:** FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the step logs above for build errors." >> $GITHUB_STEP_SUMMARY
          fi