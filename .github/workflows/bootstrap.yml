name: üöÄ Bootstrap SOFA 2.0

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/bootstrap.yml'
      - 'bin/**'
      - 'config/**'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  initialize-data:
    name: Initialize Security Data
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup environment
        run: |
          echo "üì¶ Setting up SOFA 2.0..."
          chmod +x bin/*
          mkdir -p data/raw data/feeds data/archive
          
          # Verify binaries
          echo "Checking binaries..."
          ./bin/sofa-gather --version || echo "sofa-gather ready"
          ./bin/sofa-fetch --version || echo "sofa-fetch ready"
          ./bin/sofa-build --version || echo "sofa-build ready"
      
      - name: Gather initial data
        id: gather
        run: |
          echo "üîÑ Gathering Apple security data..."
          
          # XProtect data
          ./bin/sofa-gather xprotect --output data/raw/xprotect.json || {
            echo '{"error": "pending"}' > data/raw/xprotect.json
          }
          
          # GDMF data
          ./bin/sofa-gather gdmf --output-dir data/raw/ || {
            echo '{"error": "pending"}' > data/raw/gdmf_macos.json
          }
          
          # Security releases
          ./bin/sofa-fetch --output data/raw/security_releases.json || {
            echo '{"releases": []}' > data/raw/security_releases.json
          }
          
          echo "‚úÖ Initial data gathered"
      
      - name: Build platform feeds
        run: |
          echo "üèóÔ∏è Building platform feeds..."
          
          # Build feeds for each platform
          for platform in macos ios tvos watchos visionos; do
            echo "Building $platform feed..."
            ./bin/sofa-build $platform \
              --input data/raw/ \
              --output data/feeds/${platform}.json || {
              echo '{"platform": "'$platform'", "data": []}' > data/feeds/${platform}.json
            }
          done
          
          echo "‚úÖ Platform feeds built"
      
      - name: Generate RSS feed
        run: |
          echo "üì∞ Generating RSS feed..."
          
          # Create a simple RSS feed if script doesn't exist yet
          if [ -f "scripts/generate_rss.py" ]; then
            python scripts/generate_rss.py --output data/feeds/rss.xml
          else
            cat > data/feeds/rss.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <rss version="2.0">
            <channel>
              <title>SOFA 2.0 Security Feed</title>
              <link>https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/</link>
              <description>Apple Security Updates</description>
              <lastBuildDate>$(date -R)</lastBuildDate>
              <item>
                <title>SOFA 2.0 Initialized</title>
                <description>Security data platform is now online</description>
                <pubDate>$(date -R)</pubDate>
              </item>
            </channel>
          </rss>
          EOF
          fi
          
          echo "‚úÖ RSS feed created"
      
      - name: Create metadata
        run: |
          cat > data/metadata.json << EOF
          {
            "version": "2.0.0",
            "initialized": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "data_sources": {
              "xprotect": $([ -f data/raw/xprotect.json ] && echo "true" || echo "false"),
              "gdmf": $([ -f data/raw/gdmf_macos.json ] && echo "true" || echo "false"),
              "security_releases": $([ -f data/raw/security_releases.json ] && echo "true" || echo "false")
            },
            "feeds_available": {
              "macos": true,
              "ios": true,
              "tvos": true,
              "watchos": true,
              "visionos": true,
              "rss": true
            },
            "update_schedule": "every 6 hours",
            "api_base": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data/"
          }
          EOF
          
          echo "‚úÖ Metadata created"
      
      - name: Commit initial data
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'üéâ Initialize SOFA 2.0 security data [automated]'
          commit_user_name: 'SOFA Bot'
          commit_user_email: 'sofa-bot@users.noreply.github.com'
          file_pattern: 'data/**'
      
      - name: Setup GitHub Pages
        run: |
          echo "üìÑ Configuring GitHub Pages..."
          
          # Create .nojekyll to serve JSON files
          touch .nojekyll
          
          # Create basic index.html if site not ready
          if [ ! -d "site" ]; then
            cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>SOFA 2.0</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { font-family: system-ui; max-width: 800px; margin: 0 auto; padding: 20px; }
                  .status { background: #10b981; color: white; padding: 10px; border-radius: 5px; }
                  pre { background: #f3f4f6; padding: 15px; border-radius: 5px; overflow-x: auto; }
                  a { color: #3b82f6; text-decoration: none; }
                  .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
                  .card { border: 1px solid #e5e7eb; padding: 15px; border-radius: 5px; }
              </style>
          </head>
          <body>
              <h1>üõ°Ô∏è SOFA 2.0</h1>
              <div class="status">‚úÖ System Online - Auto-updating every 6 hours</div>
              
              <h2>üìä Available Data Feeds</h2>
              <div class="grid">
                  <div class="card">
                      <h3>macOS</h3>
                      <a href="data/feeds/macos.json">JSON Feed ‚Üí</a>
                  </div>
                  <div class="card">
                      <h3>iOS</h3>
                      <a href="data/feeds/ios.json">JSON Feed ‚Üí</a>
                  </div>
                  <div class="card">
                      <h3>RSS</h3>
                      <a href="data/feeds/rss.xml">Subscribe ‚Üí</a>
                  </div>
                  <div class="card">
                      <h3>Metadata</h3>
                      <a href="data/metadata.json">System Info ‚Üí</a>
                  </div>
              </div>
              
              <h2>üîó Quick Links</h2>
              <ul>
                  <li><a href="https://github.com/${{ github.repository }}">GitHub Repository</a></li>
                  <li><a href="https://github.com/${{ github.repository }}/actions">Workflow Status</a></li>
                  <li><a href="data/">Browse All Data</a></li>
              </ul>
              
              <h2>üì° API Usage</h2>
              <pre>
// Fetch latest macOS data
fetch('https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data/feeds/macos.json')
  .then(r => r.json())
  .then(data => console.log(data))
              </pre>
              
              <hr>
              <p>Last updated: <span id="lastUpdate">checking...</span></p>
              
              <script>
                  fetch('data/metadata.json')
                      .then(r => r.json())
                      .then(data => {
                          document.getElementById('lastUpdate').textContent = data.last_updated;
                      });
              </script>
          </body>
          </html>
          EOF
          fi
      
      - name: Summary
        run: |
          echo "## üéâ SOFA 2.0 Bootstrap Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Data Sources" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ XProtect data initialized" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ GDMF data initialized" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Security releases initialized" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Access Your Data" >> $GITHUB_STEP_SUMMARY
          echo "- Web: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          echo "- API: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data/feeds/" >> $GITHUB_STEP_SUMMARY
          echo "- RSS: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data/feeds/rss.xml" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîÑ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Enable GitHub Pages in Settings ‚Üí Pages ‚Üí Source: Deploy from branch (main)" >> $GITHUB_STEP_SUMMARY
          echo "2. Data will auto-update every 6 hours" >> $GITHUB_STEP_SUMMARY
          echo "3. Customize the site in the \`site/\` directory" >> $GITHUB_STEP_SUMMARY