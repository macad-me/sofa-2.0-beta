name: 🔄 Update Security Data

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes'
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  update:
    name: Check and Update Data
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup
        run: |
          chmod +x bin/*
          echo "TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          echo "UPDATE_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
      
      - name: Check for updates
        id: check
        run: |
          echo "🔍 Checking for updates..."
          
          # Create hash of current data
          find data/raw -name "*.json" -exec sha256sum {} \; | sort > before.hash
          
          # Gather fresh data
          mkdir -p data/tmp
          
          # XProtect
          ./bin/sofa-gather xprotect --output data/tmp/xprotect.json 2>/dev/null || true
          
          # GDMF
          ./bin/sofa-gather gdmf --output-dir data/tmp/ 2>/dev/null || true
          
          # Security releases
          ./bin/sofa-fetch --output data/tmp/security_releases.json 2>/dev/null || true
          
          # Check for changes
          CHANGED=false
          
          for file in data/tmp/*.json; do
            [ -f "$file" ] || continue
            basename=$(basename "$file")
            
            if [ -f "data/raw/$basename" ]; then
              if ! cmp -s "$file" "data/raw/$basename"; then
                echo "📝 Changed: $basename"
                CHANGED=true
                cp "$file" "data/raw/$basename"
              fi
            else
              echo "✨ New: $basename"
              CHANGED=true
              cp "$file" "data/raw/$basename"
            fi
          done
          
          # Clean up temp
          rm -rf data/tmp
          
          if [ "$CHANGED" = "true" ] || [ "${{ inputs.force_update }}" = "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Updates detected"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No updates needed"
          fi
      
      - name: Build feeds
        if: steps.check.outputs.has_changes == 'true'
        run: |
          echo "🏗️ Building feeds..."
          
          # Build each platform
          for platform in macos ios tvos watchos visionos; do
            ./bin/sofa-build $platform \
              --input data/raw/ \
              --output data/feeds/${platform}.json || {
              echo "⚠️ Failed to build $platform feed"
            }
          done
          
          # Generate RSS
          if [ -f "scripts/generate_rss.py" ]; then
            python scripts/generate_rss.py \
              --input data/feeds/ \
              --output data/feeds/rss.xml || {
              echo "⚠️ RSS generation failed"
            }
          fi
          
          echo "✅ Feeds built"
      
      - name: Archive snapshot
        if: steps.check.outputs.has_changes == 'true'
        run: |
          # Keep historical snapshots (optional)
          mkdir -p data/archive/${{ env.TIMESTAMP }}
          cp data/raw/*.json data/archive/${{ env.TIMESTAMP }}/
          
          # Keep only last 10 snapshots to avoid repo bloat
          cd data/archive
          ls -t | tail -n +11 | xargs -r rm -rf
          cd ../..
      
      - name: Update metadata
        if: steps.check.outputs.has_changes == 'true'
        run: |
          cat > data/metadata.json << EOF
          {
            "version": "2.0.0",
            "last_updated": "${{ env.UPDATE_DATE }}",
            "last_check": "${{ env.UPDATE_DATE }}",
            "data_version": "${{ env.TIMESTAMP }}",
            "repository": "${{ github.repository }}",
            "update_frequency": "every 6 hours",
            "data_sources": {
              "xprotect": {
                "available": $([ -s data/raw/xprotect.json ] && echo "true" || echo "false"),
                "updated": "${{ env.UPDATE_DATE }}"
              },
              "gdmf": {
                "available": $([ -s data/raw/gdmf_macos.json ] && echo "true" || echo "false"),
                "updated": "${{ env.UPDATE_DATE }}"
              },
              "security_releases": {
                "available": $([ -s data/raw/security_releases.json ] && echo "true" || echo "false"),
                "updated": "${{ env.UPDATE_DATE }}"
              }
            },
            "statistics": {
              "total_files": $(find data -name "*.json" | wc -l),
              "total_size": "$(du -sh data | cut -f1)",
              "platforms": ["macos", "ios", "tvos", "watchos", "visionos"]
            }
          }
          EOF
      
      - name: Commit changes
        if: steps.check.outputs.has_changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '🔄 Update security data ${{ env.TIMESTAMP }} [automated]'
          commit_user_name: 'SOFA Bot'
          commit_user_email: 'sofa-bot@users.noreply.github.com'
          file_pattern: 'data/**'
      
      - name: No changes
        if: steps.check.outputs.has_changes == 'false'
        run: |
          echo "ℹ️ No updates detected" >> $GITHUB_STEP_SUMMARY
          echo "Last check: ${{ env.UPDATE_DATE }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Summary
        if: steps.check.outputs.has_changes == 'true'
        run: |
          echo "## 🔄 Security Data Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Update Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** ${{ env.UPDATE_DATE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ env.TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Files Updated" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          git diff --name-only HEAD^ HEAD | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Access Data" >> $GITHUB_STEP_SUMMARY
          echo "- [Web Interface](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
          echo "- [JSON API](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data/feeds/)" >> $GITHUB_STEP_SUMMARY
          echo "- [RSS Feed](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data/feeds/rss.xml)" >> $GITHUB_STEP_SUMMARY