name: üß™ Force Test SOFA Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      test_stage:
        description: 'Which stage to test'
        type: choice
        default: 'all'
        options:
        - gather
        - fetch
        - build
        - all
      debug_mode:
        description: 'Enable verbose debugging'
        type: boolean
        default: true
  schedule:
    # Monday, Tuesday, Thursday, and Friday every 1 hour from 5:00 PM to 8:00 PM CET
    - cron: '0 17-20 * * 1,2,3,4,5'

    # On every day every 4 hours
    - cron: '30 */4 * * *'
env:
  PYTHON_VERSION: '3.13'

jobs:
  test-pipeline:
    name: Force Test Pipeline
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Show environment info
        run: |
          echo "## üß™ Pipeline Test Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**OS:** $(lsb_release -d | cut -f2)" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture:** $(uname -m)" >> $GITHUB_STEP_SUMMARY
          echo "**Kernel:** $(uname -r)" >> $GITHUB_STEP_SUMMARY
          echo "**Python:** $(python3 --version)" >> $GITHUB_STEP_SUMMARY
          echo "**Test Stage:** ${{ github.event.inputs.test_stage }}" >> $GITHUB_STEP_SUMMARY
          echo "**Debug Mode:** ${{ github.event.inputs.debug_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show architecture details
          echo "üñ•Ô∏è Runner Architecture Details:"
          uname -a
          lscpu | head -5 || echo "lscpu not available"
          
      - name: Download SOFA CLI binaries
        run: |
          echo "üì• Downloading latest SOFA CLI binaries..."
          mkdir -p bin

          # Use specific version since latest release is marked as prerelease
          DOWNLOAD_URL="https://github.com/headmin/sofa-core-cli/releases/download/v0.1.0-beta1"
          LINUX_ZIP="sofa-core-cli-x86_64-linux-binaries.zip"

          echo "  ‚Ä¢ Downloading Linux binaries: $LINUX_ZIP"
          if curl -L -f -o "$LINUX_ZIP" "$DOWNLOAD_URL/$LINUX_ZIP"; then
            echo "    ‚úÖ Downloaded: $LINUX_ZIP"

            echo "  ‚Ä¢ Extracting binaries..."
            unzip -o -j "$LINUX_ZIP" -d bin/
            chmod +x bin/*
            rm "$LINUX_ZIP"

            echo "    ‚úÖ Extracted and made executable"
            echo "  ‚Ä¢ Extracted files:"
            ls -la bin/
          else
            echo "    ‚ùå Failed to download: $LINUX_ZIP"
            exit 1
          fi

      - name: Inspect directory structure after checkout and binary download
        run: |
          echo "üîç Detailed directory inspection after checkout and binary download..."
          echo "Working directory: $(pwd)"
          echo ""
          echo "Root directory contents:"
          ls -la
          echo ""
          echo "bin/ directory (downloaded binaries):"
          ls -la bin/ || echo "bin/ directory not found"
          echo ""
          echo "config/ directory (checked out with code):"
          ls -la config/ || echo "config/ directory not found"
          echo ""
          echo "Relative path check - bin relative to config:"
          echo "bin path from root: $(realpath bin 2>/dev/null || echo 'bin not found')"
          echo "config path from root: $(realpath config 2>/dev/null || echo 'config not found')"
          echo ""
          echo "AppleRoot.pem check:"
          if [ -f "config/AppleRoot.pem" ]; then
            echo "‚úÖ config/AppleRoot.pem exists ($(stat -c%s config/AppleRoot.pem 2>/dev/null || stat -f%z config/AppleRoot.pem 2>/dev/null) bytes)"
          else
            echo "‚ùå config/AppleRoot.pem missing"
          fi
          
      - name: Test binary execution
        run: |
          echo "üß™ Testing essential SOFA CLI binaries..."
          cd bin
          
          # Only test the binaries we actually need for the pipeline
          ESSENTIAL_BINARIES=("sofa-build" "sofa-cve" "sofa-fetch" "sofa-gather")
          
          for binary in "${ESSENTIAL_BINARIES[@]}"; do
            echo "Testing $binary..."
            
            # Check if binary exists and is executable
            if [ ! -f "$binary" ]; then
              echo "  ‚ùå $binary not found"
              continue
            fi
            
            if [ ! -x "$binary" ]; then
              echo "  ‚ùå $binary not executable"
              continue  
            fi
            
            # Check binary architecture
            echo "  üîç Binary info: $(file "$binary")"
            
            # Test execution
            if ./"$binary" --version 2>&1; then
              echo "  ‚úÖ $binary works"
            else
              EXITCODE=$?
              echo "  ‚ùå $binary failed (exit code: $EXITCODE)"
              echo "  üîç Checking binary dependencies..."
              ldd "$binary" 2>/dev/null | head -3 || echo "  Static binary (no dependencies)"
              echo "## ‚ùå Binary Test Failed" >> $GITHUB_STEP_SUMMARY
              echo "Essential binary \`$binary\` failed with exit code $EXITCODE" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          done
          
          # Remove any non-essential binaries that were extracted
          echo "üßπ Cleaning up non-essential binaries..."
          rm -f sofa-init 2>/dev/null || true
          ls -la
          
      - name: Set up Python and UV
        run: |
          echo "üêç Setting up Python environment..."
          python3 --version
          
          echo "üì¶ Installing UV..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          
          # UV installs to ~/.local/bin
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # Verify UV installation
          echo "üîç Checking UV installation..."
          echo "UV install directory contents:"
          ls -la $HOME/.local/bin/ | grep uv || echo "UV not found in .local/bin"
          
          # Test UV directly with full path
          echo "Testing UV with full path:"
          $HOME/.local/bin/uv --version
          
          # Test UV via PATH
          echo "Testing UV via PATH:"
          which uv
          uv --version

      - name: Test GDMF fetch with AppleRoot.pem (before config fix)
        run: |
          echo "üß™ Testing GDMF fetch using config/AppleRoot.pem (before config fix)..."
          cd scripts

          export PATH="../bin:$HOME/.local/bin:$PATH"

          echo "Running GDMF test script..."
          if uv run test_gdmf_fetch.py; then
            echo "‚úÖ GDMF test completed successfully"
            echo "## ‚úÖ GDMF Test Success (Before Config Fix)" >> $GITHUB_STEP_SUMMARY
            echo "GDMF fetch with AppleRoot.pem worked correctly" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå GDMF test failed (expected before config fix)"
            echo "## ‚ùå GDMF Test Failed (Before Config Fix)" >> $GITHUB_STEP_SUMMARY
            echo "GDMF fetch with AppleRoot.pem encountered errors (expected)" >> $GITHUB_STEP_SUMMARY
            # Don't exit - this is just a diagnostic test
          fi

          # Show cache contents if created
          if [ -f "../data/cache/gdmf_cached.json" ]; then
            echo "Cache file created:"
            ls -la ../data/cache/gdmf_cached.json
          fi
          
      - name: Test gather stage
        if: contains(github.event.inputs.test_stage, 'gather') || github.event.inputs.test_stage == 'all'
        run: |
          echo "üìä Testing GATHER stage..."

          cd scripts

          export SOFA_BIN_PATH="../bin"
          export PATH="../bin:$HOME/.local/bin:$PATH"

          echo "üîç Pre-gather directory verification from scripts/ directory:"
          echo "Current working directory: $(pwd)"
          echo "bin/ directory (should be ../bin from here):"
          ls -la ../bin/ || echo "‚ùå ../bin/ not found from scripts/"
          echo "config/ directory (should be ../config from here):"
          ls -la ../config/ || echo "‚ùå ../config/ not found from scripts/"
          echo "AppleRoot.pem check from scripts/:"
          if [ -f "../config/AppleRoot.pem" ]; then
            echo "‚úÖ ../config/AppleRoot.pem accessible from scripts/"
          else
            echo "‚ùå ../config/AppleRoot.pem not accessible from scripts/"
          fi
          echo ""

          if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
            echo "üîç Debug mode: Showing binary locations..."
            ls -la ../bin/
            echo "üîç Current PATH: $PATH"
            echo "üîç SOFA_BIN_PATH: $SOFA_BIN_PATH"
          fi
          
          echo "Running: uv run --script sofa_pipeline.py run --stage gather"
          if uv run --script sofa_pipeline.py run --stage gather; then
            echo "‚úÖ GATHER stage completed"
            echo "## ‚úÖ Gather Stage Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå GATHER stage failed"
            echo "## ‚ùå Gather Stage Failed" >> $GITHUB_STEP_SUMMARY
            echo "The gather stage encountered errors. Check logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Test fetch stage
        if: contains(github.event.inputs.test_stage, 'fetch') || github.event.inputs.test_stage == 'all'
        run: |
          echo "üîç Testing FETCH stage..."
          cd scripts
          
          export SOFA_BIN_PATH="../bin"
          export PATH="../bin:$HOME/.local/bin:$PATH"
          
          echo "Running: uv run --script sofa_pipeline.py run --stage fetch"
          if uv run --script sofa_pipeline.py run --stage fetch; then
            echo "‚úÖ FETCH stage completed"
            echo "## ‚úÖ Fetch Stage Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå FETCH stage failed"
            echo "## ‚ùå Fetch Stage Failed" >> $GITHUB_STEP_SUMMARY
            echo "The fetch stage encountered errors. Check logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Fix pipeline to use --config flag
        run: |
          echo "üîß Fixing pipeline to use --config flag for sofa-gather..."

          # The clean solution: use --config flag instead of changing working directory
          # This way sofa-gather can find the config file from any directory

          cd scripts

          # Create a backup
          cp sofa_pipeline.py sofa_pipeline.py.backup

          # Fix the gather command to include --config flag
          # Find the line where cmd is built and add --config parameter
          sed -i 's/cmd = \[str(binary), source.value\]/cmd = [str(binary), "--config", "..\/config\/gather.toml", source.value]/g' sofa_pipeline.py

          echo "‚úÖ Pipeline patched to use --config flag"
          echo "Checking the change:"
          grep -n -A 2 -B 2 "config.*gather.toml" sofa_pipeline.py || echo "Pattern not found, checking cmd construction..."
          grep -n -A 2 -B 2 'cmd = \[str(binary)' sofa_pipeline.py

      - name: Test GDMF fetch after pipeline fix
        run: |
          echo "üß™ Testing GDMF fetch after pipeline --config fix..."
          cd scripts

          export PATH="../bin:$HOME/.local/bin:$PATH"

          echo "Checking if pipeline was patched correctly:"
          grep -n "gather.toml" sofa_pipeline.py || echo "No gather.toml config found"

          echo "Running GDMF test script after pipeline fix..."
          if uv run test_gdmf_fetch.py; then
            echo "‚úÖ GDMF test completed successfully after pipeline fix"
            echo "## ‚úÖ GDMF Test Success (After --config Fix)" >> $GITHUB_STEP_SUMMARY
            echo "GDMF fetch with AppleRoot.pem worked correctly after adding --config flag" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå GDMF test still failed after pipeline fix"
            echo "## ‚ùå GDMF Test Still Failed (After --config Fix)" >> $GITHUB_STEP_SUMMARY
            echo "GDMF fetch with AppleRoot.pem still has issues after --config fix" >> $GITHUB_STEP_SUMMARY
            # Don't exit - this is just a diagnostic test
          fi

      - name: Test build stage
        if: contains(github.event.inputs.test_stage, 'build') || github.event.inputs.test_stage == 'all'
        run: |
          echo "üî® Testing BUILD stage..."

          # Ensure models file is available in BOTH resources and models directories for SOFA CLI
          if [ -f "data/models/supported_devices.json" ]; then
            cp data/models/supported_devices.json data/resources/
            echo "‚úÖ Copied supported_devices.json to resources directory"
          else
            echo "‚ö†Ô∏è data/models/supported_devices.json not found"
          fi

          # Also ensure it exists in models directory (v1 builder checks both locations)
          mkdir -p data/models
          if [ -f "data/resources/supported_devices.json" ]; then
            cp data/resources/supported_devices.json data/models/
            echo "‚úÖ Copied supported_devices.json to models directory for v1 builder"
          fi
          
          cd scripts
          
          export SOFA_BIN_PATH="../bin"
          export PATH="../bin:$HOME/.local/bin:$PATH"
          
          echo "Running: uv run --script sofa_pipeline.py run --stage build"
          if uv run --script sofa_pipeline.py run --stage build; then
            echo "‚úÖ BUILD stage completed"
            echo "## ‚úÖ Build Stage Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå BUILD stage failed"
            echo "## ‚ùå Build Stage Failed" >> $GITHUB_STEP_SUMMARY
            echo "The build stage encountered errors. Check logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: Show generated files
        run: |
          echo "üìÅ Checking generated files..."
          echo "## üìÅ Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Debug: Show actual directory structure on runner
          echo "üîç Runner directory structure:"
          pwd
          echo "Root directory contents:"
          ls -la
          echo "bin/ directory (downloaded binaries):"
          ls -la bin/ 2>/dev/null || echo "No bin/ directory"
          echo "config/ directory (checked out with code):"
          ls -la config/ 2>/dev/null || echo "No config/ directory"
          echo "Data directory contents:"
          ls -la data/ 2>/dev/null || echo "No data/ directory"
          echo "Scripts directory contents:"
          ls -la scripts/ 2>/dev/null || echo "No scripts/ directory"
          echo ""
          echo "Final verification - bin/ and config/ still co-located:"
          echo "bin/ exists: $([ -d bin ] && echo 'YES' || echo 'NO')"
          echo "config/ exists: $([ -d config ] && echo 'YES' || echo 'NO')"
          echo "AppleRoot.pem exists: $([ -f config/AppleRoot.pem ] && echo 'YES' || echo 'NO')"
          
          if [ -d "data/feeds" ]; then
            echo "### Feeds Directory:" >> $GITHUB_STEP_SUMMARY
            find data/feeds -type f | head -20 | while read file; do
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "unknown")
              echo "- \`$file\` (${size} bytes)" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "‚ùå No data/feeds directory found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "data/resources" ]; then
            echo "### Resources Directory:" >> $GITHUB_STEP_SUMMARY
            find data/resources -type f | head -20 | while read file; do
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "unknown")
              echo "- \`$file\` (${size} bytes)" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "‚ùå No data/resources directory found" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Test RSS generation
        run: |
          echo "üì° Testing RSS generation..."
          cd scripts
          
          if [ -f "../data/resources/bulletin_data.json" ]; then
            echo "Found bulletin_data.json, testing RSS generation..."
            if uv run --script generate_rss.py \
              --data-dir ../data/resources \
              --output ../data/feeds/v1/rss_feed.xml \
              --include-xprotect; then
              echo "‚úÖ RSS generation completed"
              echo "## ‚úÖ RSS Generation Success" >> $GITHUB_STEP_SUMMARY
              if [ -f "../data/feeds/v1/rss_feed.xml" ]; then
                rss_size=$(stat -f%z "../data/feeds/v1/rss_feed.xml" 2>/dev/null || stat -c%s "../data/feeds/v1/rss_feed.xml" 2>/dev/null)
                echo "Generated RSS feed: ${rss_size} bytes" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "‚ùå RSS generation failed"
              echo "## ‚ùå RSS Generation Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è No bulletin_data.json found, skipping RSS test"
            echo "## ‚ö†Ô∏è RSS Test Skipped" >> $GITHUB_STEP_SUMMARY
            echo "No bulletin_data.json found for RSS generation" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Commit test results to repo
        if: github.event.inputs.test_stage == 'all' || github.event.inputs.test_stage == 'build'
        run: |
          echo "üíæ Committing generated data back to repository..."
          
          # Show what data was generated
          echo "üîç Generated data structure:"
          find data/ -type f | head -20 || echo "No data files found"
          
          # Add generated data
          git config --local user.email "test@github.com"
          git config --local user.name "Pipeline Test"
          
          git add data/feeds/ data/resources/ || true
          
          if git diff --staged --quiet; then
            echo "üìù No new data to commit"
          else
            echo "üìù Committing generated pipeline data..."
            git commit -m "Update SOFA data from test pipeline run

            - Generated from test workflow execution
            - Pipeline stage: ${{ github.event.inputs.test_stage }}
            - Test timestamp: $(date -u)
            - Updated feeds and resources with latest data"
            
            git push
            echo "‚úÖ Pipeline data committed to repository"
          fi
          
      - name: Final summary
        if: always()
        run: |
          echo "## üéØ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Stage:** ${{ github.event.inputs.test_stage }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Completed:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the step logs above to see exactly where the pipeline succeeded or failed." >> $GITHUB_STEP_SUMMARY
